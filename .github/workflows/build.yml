name: Build Core Android

on:
  push:
    paths-ignore:
      - '**.md'

jobs:
  go:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.go.outputs.version }}
    steps:
      - name: Get latest Go version
        id: go
        run: |
          set -e
          echo "version=$(curl -s https://raw.githubusercontent.com/actions/go-versions/update-versions-manifest-file/versions-manifest.json | grep -oE '"version": "[0-9]{1}\.[0-9]{1,}(.[0-9]{1,})?"' | head -1 | cut -d':' -f2 | sed 's/ //g; s/"//g')" >> $GITHUB_OUTPUT

  sing-box:
    runs-on: ubuntu-latest
    needs: go
    outputs:
      version: ${{ steps.sing-box.outputs.version }}
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5.0.0
        with:
          go-version: ${{ needs.go.outputs.version }}

      - name: Get sing-box version
        id: sing-box
        run: |
          set -e
          git remote add sekai https://github.com/SagerNet/sing-box.git
          git fetch --tags sekai
          version=$(CGO_ENABLED=0 go run ./cmd/internal/read_tag)
          echo "version=$version" >> $GITHUB_OUTPUT

  build-android-core:
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - go
      - sing-box
    strategy:
      fail-fast: false
      matrix:
        jobs:
          - { goos: android, goarch: arm64, output: arm64 }
          - { goos: android, goarch: arm, goarm: 7, output: armv7 }
    env:
      GOOS: ${{ matrix.jobs.goos }}
      VERSION: ${{needs.sing-box.outputs.version}}
      TAGS: "with_gvisor,with_dhcp,with_wireguard,with_clash_api,with_quic,with_utls,with_ech,with_tailscale,with_provider"

    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5.0.0
        with:
          go-version: ${{ needs.go.outputs.version }}

      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r27
          add-to-path: false
          local-cache: false

      - name: Build Core Android
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
          mkdir -p bin
          CC=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin
          VERSION=$(git describe --tags --abbrev=0)_$(git rev-parse --short HEAD)
          BUILDDATE=$(TZ=Asia/Jakarta date)

          if [[ "${{ matrix.jobs.goarch }}" == "arm64" ]]; then
            CGO_ENABLED=1 CC=${CC}/aarch64-linux-android33-clang GOARCH=arm64 GOOS=android go build -v -trimpath -ldflags "-X 'github.com/sagernet/sing-box/constant.Version=${VERSION} ${BUILDDATE}' -s -w -buildid=" -tags ${TAGS} -o bin/sing-box-${VERSION}-android-arm64 ./cmd/sing-box
            tar -czvf "bin/sing-box-${VERSION}-android-arm64.tar.gz" "bin/sing-box-${VERSION}-android-arm64"
            rm -rf "bin/sing-box-${VERSION}-android-arm64"
          else
            CGO_ENABLED=1 CC=${CC}/armv7a-linux-androideabi33-clang GOARCH=arm GOARM=7 GOOS=android go build -v -trimpath -ldflags "-X 'github.com/sagernet/sing-box/constant.Version=${VERSION} ${BUILDDATE}' -s -w -buildid=" -tags ${TAGS} -o bin/sing-box-${VERSION}-android-armv7 ./cmd/sing-box
            tar -czvf "bin/sing-box-${VERSION}-android-armv7.tar.gz" "bin/sing-box-${VERSION}-android-armv7"
            rm -rf "bin/sing-box-${VERSION}-android-armv7"
          fi

      - name: Display tags
        if: ${{ success() }}
        run: |
          echo "${TAGS}" > bin/tags.txt

      - uses: actions/upload-artifact@v4
        if: ${{ success() }}
        with:
          name: sing-box-${{env.VERSION}}-${{env.GOOS}}-${{matrix.jobs.output}}
          path: bin/

  build-linux-core:
    runs-on: ubuntu-latest
    needs:
      - go
      - sing-box
    strategy:
      matrix:
        jobs:
          - { goos: linux, goarch: arm64, output: arm64 }
          - { goos: linux, goarch: arm, goarm: 7, output: armv7 }
    env:
      GOOS: ${{ matrix.jobs.goos }}
      VERSION: ${{ needs.sing-box.outputs.version }}
      TAGS: "with_gvisor,with_dhcp,with_wireguard,with_clash_api,with_quic,with_utls,with_ech,with_tailscale,with_provider"

    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5.0.0
        with:
          go-version: ${{ needs.go.outputs.version }}

      - name: Build core
        env:
          GOARCH: ${{ matrix.jobs.goarch }}
          CGO_ENABLED: '0'
        run: |
          set -e
          go build -v -trimpath -ldflags "-X 'github.com/sagernet/sing-box/constant.Version=${VERSION}' -s -w -buildid=" -tags "${TAGS}" ./cmd/sing-box

          mkdir -p bin/
          mv sing-box bin/
          tar -czvf "bin/sing-box-${VERSION}-${GOOS}-${{ matrix.jobs.output }}.tar.gz" "bin/sing-box"
          rm -rf "bin/sing-box"

      - name: Display tags
        if: ${{ success() }}
        run: |
          echo "${TAGS}" > bin/tags.txt

      - uses: actions/upload-artifact@v4
        if: ${{ success() }}
        with:
          name: sing-box-${{env.VERSION}}-${{env.GOOS}}-${{matrix.jobs.output}}
          path: bin

  upload:
    name: Telegram Upload Release
    runs-on: ubuntu-latest
    needs:
      - go
      - sing-box
      - build-android-core
      - build-linux-core
  
    env:
      VERSION: ${{ needs.sing-box.outputs.version }}
      TAGS: "with_gvisor,with_dhcp,with_wireguard,with_clash_api,with_quic,with_utls,with_ech"
  
    steps:
      - uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 0
  
      - uses: actions/download-artifact@v4
        with:
          name: sing-box-${{ env.VERSION }}-android-arm64
          path: bin/*
  
      - uses: actions/download-artifact@v4
        with:
          name: sing-box-${{ env.VERSION }}-android-armv7
          path: bin/*
  
      - uses: actions/download-artifact@v4
        with:
          name: sing-box-${{ env.VERSION }}-linux-arm64
          path: bin/*
  
      - uses: actions/download-artifact@v4
        with:
          name: sing-box-${{ env.VERSION }}-linux-armv7
          path: bin/*
  
      - name: Upload To Telegram
        if: ${{ success() }}
        env:
          CHAT_ID: "-1001597117128"
          MESSAGE_THREAD_ID: "282263"
          API_ID: ${{ secrets.API_ID }}
          API_HASH: ${{ secrets.API_HASH }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          if [ -n "${{ secrets.BOT_TOKEN }}" ]; then
            export VERSION=${{ env.VERSION }}
            export TAGS=${{ env.TAGS }}
            export COMMIT=$(git log --oneline -n 15 --no-decorate | sed 's/^[0-9a-f]* //' | sed 's/^/â€” /')
            FILE=$(find bin -name "*.gz")
            pip3 install telethon==1.31.1
            python3 $GITHUB_WORKSPACE/.github/twnesss.py $FILE
          fi